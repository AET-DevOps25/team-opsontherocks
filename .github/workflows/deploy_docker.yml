name: Deploy current Docker images

on:
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: AWS

    steps:
      - uses: actions/checkout@v4

      - name: Verify Environment Variables
        run: |
          if [ -z "${{ vars.EC2_PUBLIC_IP }}" ]; then
            echo "::error title=Environment Variable Missing::The 'EC2_PUBLIC_IP' variable is not available. Please check your 'AWS' environment configuration in the repository settings to ensure the name is correct and there are no pending deployment protection rules."
            exit 1
          fi
          echo "âœ… Environment variables loaded successfully."

      - name: Write EC2 SSH key to file
        run: |
          printf '%s\n' "${{ secrets.AWS_EC2_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Copy compose file to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ vars.EC2_PUBLIC_IP }}
          username: ${{ vars.AWS_EC2_USER }}
          key_path: ./private_key.pem
          source:   compose.aws.yml
          target:   /home/${{ vars.AWS_EC2_USER }}

      - name: Generate .env.prod on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ vars.EC2_PUBLIC_IP }}
          username: ${{ vars.AWS_EC2_USER }}
          key_path: ./private_key.pem
          script: |
            set -euo pipefail
            cd ~
            cat > .env.prod <<EOF
            CLIENT_HOST=client.${{ vars.EC2_PUBLIC_IP }}.nip.io
            SERVER_HOST=api.${{ vars.EC2_PUBLIC_IP }}.nip.io
            PUBLIC_API_URL=https://api.${{ vars.EC2_PUBLIC_IP }}.nip.io/api
            EOF

      - name: Pull and redeploy containers
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ vars.EC2_PUBLIC_IP }}
          username: ${{ vars.AWS_EC2_USER }}
          key_path: ./private_key.pem
          script: |
            set -euo pipefail
            cd ~
            echo "${{ secrets.GITHUB_TOKEN }}" | \
              docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            docker compose -f compose.aws.yml --env-file .env.prod pull
            docker compose -f compose.aws.yml --env-file .env.prod up -d --remove-orphans