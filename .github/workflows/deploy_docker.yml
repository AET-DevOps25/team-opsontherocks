name: Deploy Current Docker Images

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: AWS
    env:
      EC2_HOST: ${{ vars.EC2_PUBLIC_IP }}
      EC2_USER: ${{ vars.AWS_EC2_USER }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Write private key to file
        run: |
          echo "${{ secrets.AWS_EC2_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Copy Docker Compose File to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key_path: ./private_key.pem
          source: "compose.aws.yml"
          target: "/home/${{ env.EC2_USER }}"

      - name: Generate .env.prod on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key_path: ./private_key.pem
          script: |
            cd /home/${{ env.EC2_USER }}
            rm -f .env.prod
            touch .env.prod
            echo "CLIENT_HOST=client.${{ env.EC2_HOST }}.nip.io" >> .env.prod
            echo "SERVER_HOST=api.${{ env.EC2_HOST }}.nip.io" >> .env.prod
            echo "PUBLIC_API_URL=https://api.${{ env.EC2_HOST }}.nip.io/api" >> .env.prod

      - name: SSH to EC2 and Deploy Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key_path: ./private_key.pem
          script: |
            cd /home/${{ env.EC2_USER }}
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            docker compose -f compose.aws.yml --env-file .env.prod pull
            docker compose -f compose.aws.yml --env-file .env.prod up -d --remove-orphans
