version: '3.8'

services:

  db:
    image: postgres:17.5
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin}
      POSTGRES_DB: wheelOfLifeDB
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-network

  grafana:
    image: grafana/grafana-oss:12.0.0
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${POSTGRES_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${POSTGRES_PASSWORD:-admin}
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    networks:
      - app-network

  authentication:
    build:
      context: ./server/authentication
    ports:
      - "8081:8081"
    depends_on:
      - db
    environment:
      # Postgres credentials (will be "admin"/"admin" by default)
      SPRING_DATASOURCE_URL: "jdbc:postgresql://db:5432/wheelOfLifeDB"
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-admin}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-admin}

      # Let Spring Boot know its HTTP port
      SERVER_PORT: 8081

      # JPA
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      # (Optional) explicitly set the dialect if you ever need to override:
      # SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect

      # your other varsâ€¦
      CLIENT_ORIGIN: "http://localhost:5173"
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - app-network

  wheel-of-life:
    build: ./server/wheel-of-life
    ports:
      - "8080:8080"
    depends_on:
      - db
      - authentication
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://db:5432/wheelOfLifeDB"
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-admin}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-admin}

      # Expose on 8080
      SERVER_PORT: 8080

      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      JWT_SECRET: ${JWT_SECRET}
      CLIENT_ORIGIN: "http://localhost:5173"
    networks:
      - app-network

  client:
    build:
      context: ./client
      args:
        VITE_SERVER_URL: "http://localhost:8080"
        VITE_AUTH_URL: "http://localhost:8081"
        VITE_GENAI_URL: "http://localhost:5001"
    ports:
      - "5173:5173"
    depends_on:
      - wheel-of-life
      - authentication
      - genai
    networks:
      - app-network

  genai:
    build: ./genai
    ports:
      - "5001:5001"
    environment:
      CLIENT_ORIGIN: "http://localhost:5173"
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
  grafana-data:
